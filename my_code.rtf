{\rtf1\ansi\ansicpg949\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red255\green255\blue254;\red0\green0\blue0;
\red19\green120\blue72;\red144\green1\blue18;\red0\green0\blue255;\red101\green76\blue29;\red0\green0\blue109;
\red15\green112\blue1;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c3529\c53333\c35294;\cssrgb\c63922\c8235\c8235;\cssrgb\c0\c0\c100000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;
\cssrgb\c0\c50196\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 from\cf4 \strokec4  PIL \cf2 \strokec2 import\cf4 \strokec4  Image\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  PIL\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  re\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  numpy \cf2 \strokec2 as\cf4 \strokec4  np\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  os\cb1 \
\
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3 i=\cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\cb3 path = r\cf6 \strokec6 "./sub_samples/SAMPLES"\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl380\partightenfactor0
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf8 \strokec8 process_image\cf4 \strokec4 (\cf9 \strokec9 im\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3     imarray = np.array(im)\cb1 \
\cb3     im_h, im_w = imarray.shape[:\cf5 \strokec5 2\cf4 \strokec4 ]\cb1 \
\cb3     block_h, block_w = \cf5 \strokec5 100\cf4 \strokec4 , \cf5 \strokec5 100\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  row \cf7 \strokec7 in\cf4 \strokec4  np.arange(im_h - block_h +\cf5 \strokec5 1\cf4 \strokec4 , step = block_h):\cb1 \
\cb3         \cf2 \strokec2 for\cf4 \strokec4  col \cf7 \strokec7 in\cf4 \strokec4  np.arange(im_w - block_w +\cf5 \strokec5 1\cf4 \strokec4 , step = block_w):\cb1 \
\cb3             im1 = imarray[row:row+block_h, col:col+block_w, :]\cb1 \
\cb3             im1 = Image.fromarray(im1)\cb1 \
\cb3             \cf7 \strokec7 global\cf4 \strokec4  i\cb1 \
\cb3             \cf7 \strokec7 global\cf4 \strokec4  path\cb1 \
\cb3             im1.save(path + \cf6 \strokec6 "/"\cf4 \strokec4  + \cf7 \strokec7 f\cf6 \strokec6 "\cf4 \strokec4 \{i\}\cf6 \strokec6 "\cf4 \strokec4  + \cf6 \strokec6 ".jpg"\cf4 \strokec4 )\cb1 \
\cb3             i+=\cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\cb3     \cf8 \strokec8 print\cf4 \strokec4 (\cf6 \strokec6 "completed"\cf4 \strokec4 )\cb1 \
\
\
\pard\pardeftab720\sl380\partightenfactor0
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf8 \strokec8 atof\cf4 \strokec4 (\cf9 \strokec9 text\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3         retval = float(text)\cb1 \
\cb3     \cf2 \strokec2 except\cf4 \strokec4  ValueError:\cb1 \
\cb3         retval = text\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  retval\cb1 \
\
\
\pard\pardeftab720\sl380\partightenfactor0
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf8 \strokec8 natural_keys\cf4 \strokec4 (\cf9 \strokec9 text\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3     \cf6 \strokec6 '''\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl380\partightenfactor0
\cf6 \cb3 \strokec6     alist.sort(key=natural_keys) sorts in human order\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     http://nedbatchelder.com/blog/200712/human_sorting.html\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     (See Toothy's implementation in the comments)\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     float regex comes from https://stackoverflow.com/a/12643073/190597\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     '''\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 return\cf4 \strokec4  [ atof(c) \cf2 \strokec2 for\cf4 \strokec4  c \cf7 \strokec7 in\cf4 \strokec4  re.split(r\cf6 \strokec6 '[+-]?([0-9]+(?:[.][0-9]*)?|[.][0-9]+)'\cf4 \strokec4 , text) ]\cb1 \
\
\
\pard\pardeftab720\sl380\partightenfactor0
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf8 \strokec8 image_grid\cf4 \strokec4 (\cf9 \strokec9 imgs\cf4 \strokec4 , \cf9 \strokec9 rows\cf4 \strokec4 , \cf9 \strokec9 cols\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 assert\cf4 \strokec4  \cf8 \strokec8 len\cf4 \strokec4 (imgs) == rows*cols\cb1 \
\
\cb3     w, h = imgs[\cf5 \strokec5 0\cf4 \strokec4 ].size\cb1 \
\cb3     grid = Image.new(\cf6 \strokec6 'RGB'\cf4 \strokec4 , size=(cols*w, rows*h))\cb1 \
\cb3     grid_w, grid_h = grid.size\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  i, img \cf7 \strokec7 in\cf4 \strokec4  \cf8 \strokec8 enumerate\cf4 \strokec4 (imgs):\cb1 \
\cb3         grid.paste(img, box=(i%cols*w, i//cols*h))\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  grid\cb1 \
\
\
\cb3 filename = \cf6 \strokec6 './mnt/MyDrive/images.jpg'\cf4 \cb1 \strokec4 \
\cb3 im = Image.\cf8 \strokec8 open\cf4 \strokec4 (filename)\cb1 \
\cb3 process_image(im)\cb1 \
\cb3 folder_path = path + \cf6 \strokec6 "/"\cf4 \cb1 \strokec4 \
\cb3 alist=os.listdir(folder_path) \cb1 \
\cb3 alist.sort(key=natural_keys)\cb1 \
\cb3 images = [PIL.Image.\cf8 \strokec8 open\cf4 \strokec4 (folder_path+\cf9 \strokec9 file\cf4 \strokec4 ) \cf2 \strokec2 for\cf4 \strokec4  \cf9 \strokec9 file\cf4 \strokec4  \cf7 \strokec7 in\cf4 \strokec4  alist]\cb1 \
\cb3 imarray = np.array(im)\cb1 \
\cb3 im_h, im_w = imarray.shape[:\cf5 \strokec5 2\cf4 \strokec4 ]\cb1 \
\cb3 block_h, block_w = \cf5 \strokec5 100\cf4 \strokec4 , \cf5 \strokec5 100\cf4 \cb1 \strokec4 \
\
\cb3 j, k = \cf5 \strokec5 0\cf4 \strokec4 , \cf5 \strokec5 0\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl380\partightenfactor0
\cf2 \cb3 \strokec2 for\cf4 \strokec4  row \cf7 \strokec7 in\cf4 \strokec4  np.arange(im_h - block_h +\cf5 \strokec5 1\cf4 \strokec4 , step = block_h):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3       j += \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 for\cf4 \strokec4  col \cf7 \strokec7 in\cf4 \strokec4  np.arange(im_w - block_w +\cf5 \strokec5 1\cf4 \strokec4 , step = block_w):\cb1 \
\cb3         k += \cf5 \strokec5 1\cf4 \cb1 \strokec4 \
\
\
\cb3 grid = image_grid(images, rows=j, cols=k//j)\cb1 \
\cb3 grid\cb1 \
\
\
\pard\pardeftab720\sl380\partightenfactor0
\cf2 \cb3 \strokec2 import\cf4 \strokec4  tensorflow \cf2 \strokec2 as\cf4 \strokec4  tf\cb1 \
\
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3 data_gen = generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale=\cf5 \strokec5 1.0\cf4 \strokec4 /\cf5 \strokec5 255.0\cf4 \strokec4 )\cb1 \
\
\cb3 data_generator = data_gen.flow_from_directory(\cb1 \
\cb3     \cf6 \strokec6 "./sub_samples/"\cf4 \strokec4 ,\cb1 \
\cb3     target_size=(\cf5 \strokec5 100\cf4 \strokec4 , \cf5 \strokec5 100\cf4 \strokec4 ),\cb1 \
\cb3     shuffle=\cf7 \strokec7 False\cf4 \strokec4 ,\cb1 \
\cb3     batch_size=\cf5 \strokec5 1\cf4 \strokec4 )\cb1 \
\
\
\pard\pardeftab720\sl380\partightenfactor0
\cf2 \cb3 \strokec2 for\cf4 \strokec4  _ \cf7 \strokec7 in\cf4 \strokec4  \cf8 \strokec8 range\cf4 \strokec4 (\cf5 \strokec5 5\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\sl380\partightenfactor0
\cf4 \cb3     img, label = data_generator.\cf8 \strokec8 next\cf4 \strokec4 ()\cb1 \
\cb3     \cf8 \strokec8 print\cf4 \strokec4 (img.shape)   \cf10 \strokec10 #  (1,256,256,3)\cf4 \cb1 \strokec4 \
\cb3     plt.imshow(img[\cf5 \strokec5 0\cf4 \strokec4 ])\cb1 \
\cb3     plt.show()\cb1 \
}